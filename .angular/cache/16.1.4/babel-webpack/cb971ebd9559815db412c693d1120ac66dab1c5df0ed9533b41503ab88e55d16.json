{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass CartService {\n  constructor() {\n    this.cartItems = [];\n    this.selectedEvent = null;\n    this.selectedCrews = [];\n  }\n  isEventInCart(event) {\n    return this.cartItems.some(item => item.type === 'event' && item.id === event.id);\n  }\n  addToCart(event) {\n    const existingEventIndex = this.cartItems.findIndex(item => item.type === 'event');\n    if (existingEventIndex !== -1) {\n      // If an object with event.type = 'event' already exists, replace it with the new event\n      this.cartItems[existingEventIndex] = event;\n    } else {\n      // If no object with event.type = 'event' exists, simply add the event to the cart\n      this.cartItems.push(event);\n    }\n  }\n  getCartItems() {\n    return this.cartItems;\n  }\n  getSelectedEvent() {\n    return this.selectedEvent; // Return the selected event\n  }\n\n  setSelectedEvent(event) {\n    this.selectedEvent = event; // Set the selected event\n  }\n\n  setSelectedCrews(crews) {\n    this.selectedCrews = crews;\n  }\n  getSelectedCrews() {\n    return this.selectedCrews;\n  }\n  addCrewToCart(crew) {\n    // Check if the crew already exists in the cart based on your criteria\n    console.log(crew);\n    const isDuplicateCrew = this.selectedCrews.some(selectedCrew => selectedCrew.id === crew.id && selectedCrew.property === crew.property\n    // Replace \"property\" with the actual property name you want to check for uniqueness\n    );\n\n    if (!isDuplicateCrew) {\n      this.selectedCrews.push(crew);\n    }\n  }\n  removeCrewFromCart(crew) {\n    // Remove the crew from the selectedCrews array\n    const index = this.selectedCrews.findIndex(c => c.id === crew.id);\n    if (index !== -1) {\n      this.selectedCrews.splice(index, 1);\n    }\n  }\n  clearSelectedCrews() {\n    // Clear the selectedCrews array\n    this.selectedCrews = [];\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartService };","map":{"version":3,"names":["CartService","constructor","cartItems","selectedEvent","selectedCrews","isEventInCart","event","some","item","type","id","addToCart","existingEventIndex","findIndex","push","getCartItems","getSelectedEvent","setSelectedEvent","setSelectedCrews","crews","getSelectedCrews","addCrewToCart","crew","console","log","isDuplicateCrew","selectedCrew","property","removeCrewFromCart","index","c","splice","clearSelectedCrews","factory","ɵfac","providedIn"],"sources":["/home/syehino/Projects/Event-Management-System/src/app/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private cartItems: any[] = [];\n  private selectedEvent: any = null;\n  private selectedCrews: any[] = [];\n\n  constructor() {}\n\n  isEventInCart(event: any): boolean {\n    return this.cartItems.some((item) => item.type === 'event' && item.id === event.id);\n  }\n\n  addToCart(event: any): void {\n    const existingEventIndex = this.cartItems.findIndex((item) => item.type === 'event');\n    if (existingEventIndex !== -1) {\n      // If an object with event.type = 'event' already exists, replace it with the new event\n      this.cartItems[existingEventIndex] = event;\n    } else {\n      // If no object with event.type = 'event' exists, simply add the event to the cart\n      this.cartItems.push(event);\n    }\n  }\n\n  getCartItems(): any[] {\n    return this.cartItems;\n  }\n\n  getSelectedEvent(): any {\n    return this.selectedEvent; // Return the selected event\n  }\n\n  setSelectedEvent(event: any): void {\n    this.selectedEvent = event; // Set the selected event\n  }\n\n\n  setSelectedCrews(crews: any[]): void {\n    this.selectedCrews = crews;\n  }\n\n  getSelectedCrews(): any[] {\n    return this.selectedCrews;\n  }\n\n  addCrewToCart(crew: any): void {\n    // Check if the crew already exists in the cart based on your criteria\n    console.log(crew);\n    const isDuplicateCrew = this.selectedCrews.some(\n      (selectedCrew) => selectedCrew.id === crew.id && selectedCrew.property === crew.property\n      // Replace \"property\" with the actual property name you want to check for uniqueness\n    );\n\n    if (!isDuplicateCrew) {\n      this.selectedCrews.push(crew);\n    }\n  }\n\n  removeCrewFromCart(crew: any): void {\n    // Remove the crew from the selectedCrews array\n    const index = this.selectedCrews.findIndex((c) => c.id === crew.id);\n    if (index !== -1) {\n      this.selectedCrews.splice(index, 1);\n    }\n  }\n\n  clearSelectedCrews(): void {\n    // Clear the selectedCrews array\n    this.selectedCrews = [];\n  }\n}"],"mappings":";AAEA,MAGaA,WAAW;EAKtBC,YAAA;IAJQ,KAAAC,SAAS,GAAU,EAAE;IACrB,KAAAC,aAAa,GAAQ,IAAI;IACzB,KAAAC,aAAa,GAAU,EAAE;EAElB;EAEfC,aAAaA,CAACC,KAAU;IACtB,OAAO,IAAI,CAACJ,SAAS,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,OAAO,IAAID,IAAI,CAACE,EAAE,KAAKJ,KAAK,CAACI,EAAE,CAAC;EACrF;EAEAC,SAASA,CAACL,KAAU;IAClB,MAAMM,kBAAkB,GAAG,IAAI,CAACV,SAAS,CAACW,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,OAAO,CAAC;IACpF,IAAIG,kBAAkB,KAAK,CAAC,CAAC,EAAE;MAC7B;MACA,IAAI,CAACV,SAAS,CAACU,kBAAkB,CAAC,GAAGN,KAAK;KAC3C,MAAM;MACL;MACA,IAAI,CAACJ,SAAS,CAACY,IAAI,CAACR,KAAK,CAAC;;EAE9B;EAEAS,YAAYA,CAAA;IACV,OAAO,IAAI,CAACb,SAAS;EACvB;EAEAc,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACb,aAAa,CAAC,CAAC;EAC7B;;EAEAc,gBAAgBA,CAACX,KAAU;IACzB,IAAI,CAACH,aAAa,GAAGG,KAAK,CAAC,CAAC;EAC9B;;EAGAY,gBAAgBA,CAACC,KAAY;IAC3B,IAAI,CAACf,aAAa,GAAGe,KAAK;EAC5B;EAEAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAChB,aAAa;EAC3B;EAEAiB,aAAaA,CAACC,IAAS;IACrB;IACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,MAAMG,eAAe,GAAG,IAAI,CAACrB,aAAa,CAACG,IAAI,CAC5CmB,YAAY,IAAKA,YAAY,CAAChB,EAAE,KAAKY,IAAI,CAACZ,EAAE,IAAIgB,YAAY,CAACC,QAAQ,KAAKL,IAAI,CAACK;IAChF;KACD;;IAED,IAAI,CAACF,eAAe,EAAE;MACpB,IAAI,CAACrB,aAAa,CAACU,IAAI,CAACQ,IAAI,CAAC;;EAEjC;EAEAM,kBAAkBA,CAACN,IAAS;IAC1B;IACA,MAAMO,KAAK,GAAG,IAAI,CAACzB,aAAa,CAACS,SAAS,CAAEiB,CAAC,IAAKA,CAAC,CAACpB,EAAE,KAAKY,IAAI,CAACZ,EAAE,CAAC;IACnE,IAAImB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACzB,aAAa,CAAC2B,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAEvC;EAEAG,kBAAkBA,CAAA;IAChB;IACA,IAAI,CAAC5B,aAAa,GAAG,EAAE;EACzB;;AAnEWJ,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPnC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}