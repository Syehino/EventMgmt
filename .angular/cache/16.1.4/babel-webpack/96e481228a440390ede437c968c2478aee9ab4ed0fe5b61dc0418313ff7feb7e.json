{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass CartService {\n  constructor() {\n    this.cartItems = [];\n    this.selectedEvent = null;\n    this.selectedCrews = [];\n  }\n  isEventInCart(event) {\n    return this.cartItems.some(item => item.type === 'event' && item.id === event.id);\n  }\n  addToCart(event) {\n    const existingEventIndex = this.cartItems.findIndex(item => item.type === 'event');\n    if (existingEventIndex !== -1) {\n      // If an object with event.type = 'event' already exists, replace it with the new event\n      this.cartItems[existingEventIndex] = event;\n    } else {\n      // If no object with event.type = 'event' exists, simply add the event to the cart\n      this.cartItems.push(event);\n    }\n  }\n  getCartItems() {\n    return this.cartItems;\n  }\n  getSelectedEvent() {\n    return this.selectedEvent; // Return the selected event\n  }\n\n  setSelectedEvent(event) {\n    this.selectedEvent = event; // Set the selected event\n  }\n\n  getEventTotalPrice() {\n    let total = 0;\n    total = this.selectedEvent.price;\n    return total;\n  }\n  //crews\n  isCrewInCart(crew) {\n    return this.selectedCrews.some(item => item.id === crew.id);\n  }\n  addCrewToCart(crew) {\n    const existingCrewIndex = this.selectedCrews.findIndex(item => item.id === crew.id);\n    if (existingCrewIndex === -1) {\n      // If the crew does not exist in the selectedCrews array, add it\n      this.selectedCrews.push(crew);\n    } else {\n      // If the crew already exists, replace it with the new crew\n      this.selectedCrews[existingCrewIndex] = crew;\n    }\n  }\n  removeCrewFromCart(crew) {\n    this.selectedCrews = this.selectedCrews.filter(item => item.id !== crew.id);\n  }\n  getSelectedCrews() {\n    return this.selectedCrews;\n  }\n  getCrewsTotalPrice() {\n    let total = 0;\n    this.selectedCrews.forEach(item => {\n      total += item.price;\n      // Add more conditions for other types if necessary\n    });\n\n    return total;\n  }\n  clearCart() {\n    this.cartItems = [];\n    this.selectedEvent = null;\n    this.selectedCrews = [];\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartService };","map":{"version":3,"names":["CartService","constructor","cartItems","selectedEvent","selectedCrews","isEventInCart","event","some","item","type","id","addToCart","existingEventIndex","findIndex","push","getCartItems","getSelectedEvent","setSelectedEvent","getEventTotalPrice","total","price","isCrewInCart","crew","addCrewToCart","existingCrewIndex","removeCrewFromCart","filter","getSelectedCrews","getCrewsTotalPrice","forEach","clearCart","factory","ɵfac","providedIn"],"sources":["/home/syehino/Projects/Event-Management-System/src/app/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private cartItems: any[] = [];\n  private selectedEvent: any = null;\n  private selectedCrews: any[] = [];\n\n  constructor() {}\n\n  isEventInCart(event: any): boolean {\n    return this.cartItems.some((item) => item.type === 'event' && item.id === event.id);\n  }\n\n  addToCart(event: any): void {\n    const existingEventIndex = this.cartItems.findIndex((item) => item.type === 'event');\n    if (existingEventIndex !== -1) {\n      // If an object with event.type = 'event' already exists, replace it with the new event\n      this.cartItems[existingEventIndex] = event;\n    } else {\n      // If no object with event.type = 'event' exists, simply add the event to the cart\n      this.cartItems.push(event);\n    }\n  }\n\n  getCartItems(): any[] {\n    return this.cartItems;\n  }\n\n  getSelectedEvent(): any {\n    return this.selectedEvent; // Return the selected event\n  }\n\n  setSelectedEvent(event: any): void {\n    this.selectedEvent = event; // Set the selected event\n  }\n\n  getEventTotalPrice(): number {\n    let total = 0;\n    total = this.selectedEvent.price;\n    return total;\n  }\n\n\n  //crews\n\n  isCrewInCart(crew: any): boolean {\n    return this.selectedCrews.some((item) => item.id === crew.id);\n  }\n\n  addCrewToCart(crew: any): void {\n    const existingCrewIndex = this.selectedCrews.findIndex((item) => item.id === crew.id);\n    if (existingCrewIndex === -1) {\n      // If the crew does not exist in the selectedCrews array, add it\n      this.selectedCrews.push(crew);\n    } else {\n      // If the crew already exists, replace it with the new crew\n      this.selectedCrews[existingCrewIndex] = crew;\n    }\n  }\n\n  removeCrewFromCart(crew: any): void {\n    this.selectedCrews = this.selectedCrews.filter((item) => item.id !== crew.id);\n  }\n\n  getSelectedCrews(): any[] {\n    return this.selectedCrews;\n  }\n\n  getCrewsTotalPrice(): number {\n    let total = 0;\n    this.selectedCrews.forEach((item) => {\n      total += item.price;\n      // Add more conditions for other types if necessary\n    });\n    return total;\n  }\n\n  clearCart(): void {\n    this.cartItems = [];\n    this.selectedEvent = null;\n    this.selectedCrews = [];\n  }\n}"],"mappings":";AAEA,MAGaA,WAAW;EAKtBC,YAAA;IAJQ,KAAAC,SAAS,GAAU,EAAE;IACrB,KAAAC,aAAa,GAAQ,IAAI;IACzB,KAAAC,aAAa,GAAU,EAAE;EAElB;EAEfC,aAAaA,CAACC,KAAU;IACtB,OAAO,IAAI,CAACJ,SAAS,CAACK,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,OAAO,IAAID,IAAI,CAACE,EAAE,KAAKJ,KAAK,CAACI,EAAE,CAAC;EACrF;EAEAC,SAASA,CAACL,KAAU;IAClB,MAAMM,kBAAkB,GAAG,IAAI,CAACV,SAAS,CAACW,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,OAAO,CAAC;IACpF,IAAIG,kBAAkB,KAAK,CAAC,CAAC,EAAE;MAC7B;MACA,IAAI,CAACV,SAAS,CAACU,kBAAkB,CAAC,GAAGN,KAAK;KAC3C,MAAM;MACL;MACA,IAAI,CAACJ,SAAS,CAACY,IAAI,CAACR,KAAK,CAAC;;EAE9B;EAEAS,YAAYA,CAAA;IACV,OAAO,IAAI,CAACb,SAAS;EACvB;EAEAc,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACb,aAAa,CAAC,CAAC;EAC7B;;EAEAc,gBAAgBA,CAACX,KAAU;IACzB,IAAI,CAACH,aAAa,GAAGG,KAAK,CAAC,CAAC;EAC9B;;EAEAY,kBAAkBA,CAAA;IAChB,IAAIC,KAAK,GAAG,CAAC;IACbA,KAAK,GAAG,IAAI,CAAChB,aAAa,CAACiB,KAAK;IAChC,OAAOD,KAAK;EACd;EAGA;EAEAE,YAAYA,CAACC,IAAS;IACpB,OAAO,IAAI,CAAClB,aAAa,CAACG,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKY,IAAI,CAACZ,EAAE,CAAC;EAC/D;EAEAa,aAAaA,CAACD,IAAS;IACrB,MAAME,iBAAiB,GAAG,IAAI,CAACpB,aAAa,CAACS,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKY,IAAI,CAACZ,EAAE,CAAC;IACrF,IAAIc,iBAAiB,KAAK,CAAC,CAAC,EAAE;MAC5B;MACA,IAAI,CAACpB,aAAa,CAACU,IAAI,CAACQ,IAAI,CAAC;KAC9B,MAAM;MACL;MACA,IAAI,CAAClB,aAAa,CAACoB,iBAAiB,CAAC,GAAGF,IAAI;;EAEhD;EAEAG,kBAAkBA,CAACH,IAAS;IAC1B,IAAI,CAAClB,aAAa,GAAG,IAAI,CAACA,aAAa,CAACsB,MAAM,CAAElB,IAAI,IAAKA,IAAI,CAACE,EAAE,KAAKY,IAAI,CAACZ,EAAE,CAAC;EAC/E;EAEAiB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACvB,aAAa;EAC3B;EAEAwB,kBAAkBA,CAAA;IAChB,IAAIT,KAAK,GAAG,CAAC;IACb,IAAI,CAACf,aAAa,CAACyB,OAAO,CAAErB,IAAI,IAAI;MAClCW,KAAK,IAAIX,IAAI,CAACY,KAAK;MACnB;IACF,CAAC,CAAC;;IACF,OAAOD,KAAK;EACd;EAEAW,SAASA,CAAA;IACP,IAAI,CAAC5B,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,aAAa,GAAG,EAAE;EACzB;;AA/EWJ,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPjC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}