{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass CartService {\n  constructor() {\n    var _ref;\n    this.cartItems = [];\n    this.selectedEvent = (_ref = null) !== null && _ref !== void 0 ? _ref : {};\n    this.selectedCrews = [];\n    this.orderHistory = [];\n  }\n  isEventInCart(event) {\n    return this.cartItems.some(item => item.type === 'event' && item.id === event.id);\n  }\n  addToCart(event) {\n    const existingEventIndex = this.cartItems.findIndex(item => item.type === 'event');\n    if (existingEventIndex !== -1) {\n      // If an object with event.type = 'event' already exists, replace it with the new event\n      this.cartItems[existingEventIndex] = event;\n    } else {\n      // If no object with event.type = 'event' exists, simply add the event to the cart\n      this.cartItems.push(event);\n    }\n  }\n  getCartItems() {\n    return this.cartItems;\n  }\n  getSelectedEvent() {\n    return this.selectedEvent; // Return the selected event\n  }\n\n  setSelectedEvent(event) {\n    this.selectedEvent = event; // Set the selected event\n  }\n\n  getEventTotalPrice() {\n    var _this$selectedEvent$p, _this$selectedEvent;\n    let EventTotal = 0;\n    EventTotal = (_this$selectedEvent$p = (_this$selectedEvent = this.selectedEvent) === null || _this$selectedEvent === void 0 ? void 0 : _this$selectedEvent.price) !== null && _this$selectedEvent$p !== void 0 ? _this$selectedEvent$p : 0;\n    return EventTotal;\n  }\n  //crews\n  isCrewInCart(crew) {\n    return this.selectedCrews.some(item => item.id === crew.id);\n  }\n  addCrewToCart(crew) {\n    const existingCrewIndex = this.selectedCrews.findIndex(item => item.id === crew.id);\n    if (existingCrewIndex === -1) {\n      // If the crew does not exist in the selectedCrews array, add it\n      this.selectedCrews.push(crew);\n    } else {\n      // If the crew already exists, replace it with the new crew\n      this.selectedCrews[existingCrewIndex] = crew;\n    }\n  }\n  removeCrewFromCart(crew) {\n    this.selectedCrews = this.selectedCrews.filter(item => item.id !== crew.id);\n  }\n  getSelectedCrews() {\n    return this.selectedCrews;\n  }\n  getCrewsTotalPrice() {\n    let CrewTotal = 0;\n    this.selectedCrews.forEach(item => {\n      CrewTotal += item.price;\n    });\n    return CrewTotal;\n  }\n  clearCart() {\n    //clear cart\n    this.cartItems = [];\n    this.selectedEvent = null;\n    this.selectedCrews = [];\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartService };","map":{"version":3,"names":["CartService","constructor","_ref","cartItems","selectedEvent","selectedCrews","orderHistory","isEventInCart","event","some","item","type","id","addToCart","existingEventIndex","findIndex","push","getCartItems","getSelectedEvent","setSelectedEvent","getEventTotalPrice","_this$selectedEvent$p","_this$selectedEvent","EventTotal","price","isCrewInCart","crew","addCrewToCart","existingCrewIndex","removeCrewFromCart","filter","getSelectedCrews","getCrewsTotalPrice","CrewTotal","forEach","clearCart","factory","ɵfac","providedIn"],"sources":["/home/syehino/Projects/Event-Management-System/src/app/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private cartItems: any[] = [];\n  private selectedEvent: any = null ?? {};\n  private selectedCrews: any[] = [];\n  private orderHistory: any[] = [];\n\n  constructor() {}\n\n  isEventInCart(event: any): boolean {\n    return this.cartItems.some((item) => item.type === 'event' && item.id === event.id);\n  }\n\n  addToCart(event: any): void {\n    const existingEventIndex = this.cartItems.findIndex((item) => item.type === 'event');\n    if (existingEventIndex !== -1) {\n      // If an object with event.type = 'event' already exists, replace it with the new event\n      this.cartItems[existingEventIndex] = event;\n    } else {\n      // If no object with event.type = 'event' exists, simply add the event to the cart\n      this.cartItems.push(event);\n    }\n  }\n\n  getCartItems(): any[] {\n    return this.cartItems;\n  }\n\n  getSelectedEvent(): any {\n    return this.selectedEvent; // Return the selected event\n  }\n\n  setSelectedEvent(event: any): void {\n    this.selectedEvent = event; // Set the selected event\n  }\n\n  getEventTotalPrice(): number {\n    let EventTotal = 0;\n    EventTotal = this.selectedEvent?.price ?? 0;\n    return EventTotal;\n  }\n\n\n  //crews\n\n  isCrewInCart(crew: any): boolean {\n    return this.selectedCrews.some((item) => item.id === crew.id);\n  }\n\n  addCrewToCart(crew: any): void {\n    const existingCrewIndex = this.selectedCrews.findIndex((item) => item.id === crew.id);\n    if (existingCrewIndex === -1) {\n      // If the crew does not exist in the selectedCrews array, add it\n      this.selectedCrews.push(crew);\n    } else {\n      // If the crew already exists, replace it with the new crew\n      this.selectedCrews[existingCrewIndex] = crew;\n    }\n  }\n\n  removeCrewFromCart(crew: any): void {\n    this.selectedCrews = this.selectedCrews.filter((item) => item.id !== crew.id);\n  }\n\n  getSelectedCrews(): any[] {\n    return this.selectedCrews;\n  }\n\n  getCrewsTotalPrice(): number {\n    let CrewTotal = 0;\n    this.selectedCrews.forEach((item) => {\n      CrewTotal += item.price;\n    });\n    return CrewTotal;\n  }\n\n  clearCart(): void {  \n    //clear cart\n    this.cartItems = [];\n    this.selectedEvent = null;\n    this.selectedCrews = [];\n  }\n  \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}